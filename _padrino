#compdef padrino

typeset -A opt_args

_arguments -C \
  '1:cmd:->cmds' \
  '2:generators:->generator_lists' \
  '*:: :->args' \
&& ret=0

case "$state" in
  (cmds)
     local commands; commands=(
      'g:Padrinos generators'
      'rake:Run Padrinos rake tasks'
     )

      _describe -t commands 'command' commands && ret=0
  ;;
  (generator_lists)
    case $line[1] in
      (g)
        local generators; generators=(
          'controller:creates a new controller'
          'mailer:creates a new mailer'
          'migration:creates a new migration'
          'model:creates a new model'
          'project:create a new Padrino app'
          'plugin:add plugin to your app'
        )
        _describe -t generators 'generator' generators && ret=0
      ;;
      (rake)
        local rake; rakes=(
          'ar\:abort_if_pending_migrations:Raises an error if there are pending migrations.'
          'ar\:auto\:upgrade:Uses schema.rb to auto-upgrade.'
          'ar\:charset:Retrieves database charset.'
          'ar\:collation:Retrieves databsae collation.'
          'ar\:create:Creates the database as defined in config/database.yml'
          'ar\:create\:all:Creates local databases as defined in config/database.yml'
          'ar\:drop:Drops the database for the current Padrino.env'
          'ar\:drop\:all:Drops local databases defined in config/database.yml'
          'ar\:forward:Pushes the schema to the next version.'
          'ar\:migrate:Migrates the database through scripts in db/migrate.'
          'ar\:migrate\:down:Runs the "down" for a given migration VERSION.'
          'ar\:migrate\:redo:Rollbacks current migration and migrates up to version.'
          'ar\:migrate\:reset:Resets your database using your migrations.'
          'ar\:migrate\:up:Runs the "up" for a given migration VERSION NUMBER.'
          'ar\:reset:Drops and recreates the database using db/schema.rb.'
          'ar\:rollback:Rolls back the schema to previous schema version.'
          'ar\:schema\:dump:Creates a portable db/schema.rb file.'
          'ar\:schema\:load:Loads a schema.rb file into the database.'
          'ar\:schema\:to_migration:Creates a migration from schema.rb'
          'ar\:schema\:to_migration_with_reset:Creates a migration and resets the migrations log.'
          'ar\:setup:Creates the database, loads the schema, and seeds data.'
          'ar\:structure\:dump:Dumps the database structure to a SQL file.'
          'ar\:translate:Translate your ActiveRecord models.'
          'ar\:version:Retrieves the current schema version number.'
          'locale\:models:Generate a YAML file for localizing your models.'
          'routes:Retrieving a list of named routes.'
          'spec:Run all rspec tests.'
          'test:Run all tests written in bacon, riot, and shoulda.'
        )
        _describe -t rakes 'rake' rakes && ret=0
      ;;
    esac
  ;;
  (args)
    case $line[2] in
      (controller)
        _arguments \
          '-d:remove all generated files' \
          '-n:specify the application' \
          '-r:specify the root'
          ret=0
      ;;
      (mailer)
        local mailers; mailers=(
          '-a:creates a mailer for the specified subapp'
          '-d:removes all generated files'
          '-n:specify the application'
          '-r:specify the root destination path'
        )
        _describe -t mailers 'mailer' mailers && ret=0
      ;;
      (migration)
        local migrations; migrations=(
          '-d:removes all generated files'
          '-r:specify the root destination path'
        )
        _describe -t migrations 'migration' migrations && ret=0
      ;;
      (model)
        local models; models=(
          '-d:removes all generated files'
          '-r:specify the root destination path'
          '-s:skip migration generation'
        )
        _describe -t models 'model' models && ret=0
      ;;
      (project)
        local projects; projects=(
          "-a:specify db adapter (options: 'mysql', 'sqlite' , 'postgres')"
          "-b:execute bundler dependencies installation"
          "-c:define stylesheet (options: 'compass', 'less', 'sass', 'scss')"
          "-d:define orm (options: 'mongoid', 'activerecord', 'datamapper', 'couchrest', 'mongomatic', 'ohm', 'ripple', 'sequel')"
          "-i:generate tiny project skeleton without any components"
          "-e:define renderer (options: 'erb', 'haml', 'slim', 'liquid')"
          "-m:define mock (options: 'mocha', 'rr')"
          "-n:specify app name different from the project name"
          "-r:the root destination path for the project"
          "-s:define script (options: 'prototype' 'rightjs' 'jquery' 'mootools' 'extcore' 'dojo')"
          "-t:define test (options: 'bacon', 'shoulda', 'cucumber', 'testspec', 'riot', 'rspec', 'minitest')"
        )
        _describe -t projects 'project' projects && ret=0
      ;;
    esac
  ;;
esac

return 1
